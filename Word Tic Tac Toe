import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Word Tic Tac Toe',
      home: TicTacToe(),
    );
  }
}

class TicTacToe extends StatefulWidget {
  @override
  _TicTacToeState createState() => _TicTacToeState();
}

class _TicTacToeState extends State<TicTacToe> {
  final List<String?> board = List.filled(9, null);
  bool isXTurn = true;

  String currentPlayer() => isXTurn ? 'Player 1' : 'Player 2';

  void _handleTap(int index) {
    if (board[index] == null) {
      showDialog(
        context: context,
        builder: (context) {
          String inputWord = '';
          return AlertDialog(
            title: Text('Enter a word'),
            content: TextField(
              onChanged: (value) {
                inputWord = value;
              },
              decoration: InputDecoration(hintText: 'Word'),
            ),
            actions: [
              TextButton(
                onPressed: () {
                  if (inputWord.isNotEmpty) {
                    setState(() {
                      board[index] = inputWord; 
                    });
                    Navigator.of(context).pop(); 
                    if (_checkWin()) {
                      _showWinDialog();
                    } else {
                      setState(() {
                        isXTurn = !isXTurn; 
                      });
                    }
                  }
                },
                child: Text('OK'),
              ),
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('Cancel'),
              ),
            ],
          );
        },
      );
    }
  }

  bool _checkWin() {
    for (int i = 0; i < 3; i++) {
      if (_hasWinningLine(i * 3, i * 3 + 1, i * 3 + 2) || // Horizontals
          _hasWinningLine(i, i + 3, i + 6)) {
        // Verticals
        return true;
      }
    }
    return _hasWinningLine(0, 4, 8) || _hasWinningLine(2, 4, 6); // Diagonals
  }

  bool _hasWinningLine(int index1, int index2, int index3) {
    if (board[index1] != null &&
        board[index2] != null &&
        board[index3] != null) {
      return _hasCommonLetter(board[index1]!, board[index2]!, board[index3]!);
    }
    return false;
  }

  bool _hasCommonLetter(String word1, String word2, String word3) {
    final Set<String> chars1 = word1.split('').toSet();
    final Set<String> chars2 = word2.split('').toSet();
    final Set<String> chars3 = word3.split('').toSet();
    return chars1.intersection(chars2).intersection(chars3).isNotEmpty;
  }

  void _showWinDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('${isXTurn ? "Player 1" : "Player 2"} win!'),
          actions: [
            TextButton(
              onPressed: () {
                _resetGame();
                Navigator.of(context).pop();
              },
              child: Text('Reset'),
            ),
          ],
        );
      },
    );
  }

  void _resetGame() {
    setState(() {
      for (int i = 0; i < board.length; i++) {
        board[i] = null;
      }
      isXTurn = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Word Tic Tac Toe")),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            "Current: ${currentPlayer()}",
            style: TextStyle(fontSize: 24),
          ),
          Expanded(
            child: GridView.builder(
              gridDelegate:
                  SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),
              itemCount: 9,
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () => _handleTap(index),
                  child: Container(
                    margin: EdgeInsets.all(4.0),
                    decoration: BoxDecoration(
                      border: Border.all(),
                      color: Colors.white,
                    ),
                    child: Center(
                      child: Text(
                        board[index] ?? '',
                        style: TextStyle(fontSize: 64), 
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          ElevatedButton(onPressed: _resetGame, child: Text("Reset")),
        ],
      ),
    );
  }
}
